open Batteries
;;
open Types
;;

let token_print o t =
  let s =
    match t with
    | EOF -> "EOF"
    | VarId -> "VarId"
    | ConId -> "ConId"
    | VarSym -> "VarSym"
    | ConSym -> "ConSym"
    | QVarId -> "QVarId"
    | QConId -> "QConId"
    | QVarSym -> "QVarSym"
    | QConSym -> "QConSym"
    | IntLit -> "IntLit"
    | FloatLit -> "FloatLit"
    | CharLit -> "CharLit"
    | StringLit -> "StringLit"
    | RCase -> "RCase"
    | RClass -> "RClass"
    | RData -> "RData"
    | RDefault -> "RDefault"
    | RDeriving -> "RDeriving"
    | RDo -> "RDo"
    | RElse -> "RElse"
    | RIf -> "RIf"
    | RImport -> "RImport"
    | RIn -> "RIn"
    | RInfix -> "RInfix"
    | RInfixl -> "RInfixl"
    | RInfixr -> "RInfixr"
    | RInstance -> "RInstance"
    | RLet -> "RLet"
    | RModule -> "RModule"
    | RNewtype -> "RNewtype"
    | ROf -> "ROf"
    | RThen -> "RThen"
    | RType -> "RType"
    | RWhere -> "RWhere"
    | RUnderscore -> "RUnderscore"
    | RDotDot -> "RDotDot"
    | RColon -> "RColon"
    | RColonColon -> "RColonColon"
    | REquals -> "REquals"
    | RBackslash -> "RBackslash"
    | RPipe -> "RPipe"
    | RLArrowDash -> "RLArrowDash"
    | RDashRArrow -> "RDashRArrow"
    | RAt -> "RAt"
    | RTilde -> "RTilde"
    | REqualsRArrow -> "REqualsRArrow"
    | LParen -> "LParen"
    | RParen -> "RParen"
    | LSquare -> "LSquare"
    | RSquare -> "RSquare"
    | LCurly -> "LCurly"
    | RCurly -> "RCurly"
    | Comma -> "Comma"
    | Semicolon -> "Semicolon"
    | Backquote -> "Backquote"
  in Printf.fprintf o "%s" s
;;

let lexeme_print o l =
  Printf.fprintf o "(%a %s [%d-%d])"
    token_print l.token l.Types.contents l.startraw l.endraw
;;

let nonterm_print o nt =
  let s =
    match nt with
    | Goal -> "Goal"
    | NTmodule -> "NTmodule"
    | NTbody -> "NTbody"
    | NTexports -> "NTexports"
    | NTexport -> "NTexport"
    | NTimpspec -> "NTimpspec"
    | NTimport -> "NTimport"
    | NTqcname -> "NTqcname"
    | NTtopdecls -> "NTtopdecls"
    | NTtopdecl -> "NTtopdecl"
    | NTdecls -> "NTdecls"
    | NTdecl -> "NTdecl"
    | NTgendecl -> "NTgendecl"
    | NTops -> "NTops"
    | NTqvars -> "NTqvars"
    | NTfixity -> "NTfixity"
    | NTtype -> "NTtype"
    | NTbtype -> "NTbtype"
    | NTatype -> "NTatype"
    | NTgtycon -> "NTgtycon"
    | NTscontext -> "NTscontext"
    | NTsimpleclass -> "NTsimpleclass"
    | NTsimpletype -> "NTsimpletype"
    | NTconstrs -> "NTconstrs"
    | NTconstr -> "NTconstr"
    | NTnewconstr -> "NTnewconstr"
    | NTfielddecl -> "NTfielddecl"
    | NTderiving -> "NTderiving"
    | NTdclass -> "NTdclass"
    | NTinst -> "NTinst"
    | NTrhs -> "NTrhs"
    | NTgdrhs -> "NTgdrhs"
    | NTgd -> "NTgd"
    | NTexp -> "NTexp"
    | NTinfixexp -> "NTinfixexp"
    | NTexp10 -> "NTexp10"
    | NTaexp -> "NTaexp"
    | NTqual -> "NTqual"
    | NTalts -> "NTalts"
    | NTalt -> "NTalt"
    | NTgdpat -> "NTgdpat"
    | NTstmts -> "NTstmts"
    | NTstmt -> "NTstmt"
    | NTfbind -> "NTfbind"
    | NTgcon -> "NTgcon"
    | NTqvar -> "NTqvar"
    | NTcon -> "NTcon"
    | NTqcon -> "NTqcon"
    | NTqvarop -> "NTqvarop"
    | NTconop -> "NTconop"
    | NTqconop -> "NTqconop"
    | NTop -> "NTop"
    | NTqop -> "NTqop"
    | NTexportlist -> "NTexportlist"
    | NTqcnamelist -> "NTqcnamelist"
    | NTimportlist -> "NTimportlist"
    | NTtopdecllist -> "NTtopdecllist"
    | NTqvarlist -> "NTqvarlist"
    | NTtypelist -> "NTtypelist"
    | NTcommalist -> "NTcommalist"
    | NToplist -> "NToplist"
    | NTsimpleclasslist -> "NTsimpleclasslist"
    | NTconstrlist -> "NTconstrlist"
    | NTfielddecllist -> "NTfielddecllist"
    | NTdclasslist -> "NTdclasslist"
    | NTexplist -> "NTexplist"
    | NTquallist -> "NTquallist"
    | NTfbindlist -> "NTfbindlist"
    | NTdecllist -> "NTdecllist"
    | NTtyvarlist -> "NTtyvarlist"
    | NTtyvarcommalist -> "NTtyvarcommalist"
    | NTaexplist -> "NTaexplist"
    | NTaltlist -> "NTaltlist"
    | NTstmtlist -> "NTstmtlist"
    | NTqvarid -> "NTqvarid"
    | NTqconid -> "NTqconid"
    | NTliteral -> "NTliteral"
  in Printf.fprintf o "%s" s
;;

let ast0_print o ast =
  let ast0_print_helper _foo ast depth =
    let indent = String.init depth (fun _ -> ' ')
    and s =
      match ast.node with
      | Ast0_module _ -> "Ast0_module"
      | Ast0_body _ -> "Ast0_body"
      | Ast0_export_var _ -> "Ast0_export_var"
      | Ast0_export_type _ -> "Ast0_export_type"
      | Ast0_export_module _ -> "Ast0_export_module"
      | Ast0_topdecl_import _ -> "Ast0_topdecl_import"
      | Ast0_impspec _ -> "Ast0_impspec"
      | Ast0_import_var _ -> "Ast0_import_var"
      | Ast0_import_type _ -> "Ast0_import_type"
      | Ast0_topdecl_type _ -> "Ast0_topdecl_type"
      | Ast0_topdecl_data _ -> "Ast0_topdecl_data"
      | Ast0_topdecl_newtype _ -> "Ast0_topdecl_newtype"
      | Ast0_topdecl_class _ -> "Ast0_topdecl_class"
      | Ast0_topdecl_instance _ -> "Ast0_topdecl_instance"
      | Ast0_topdecl_default _ -> "Ast0_topdecl_default"
      | Ast0_topdecl_decl _ -> "Ast0_topdecl_decl"
      | Ast0_decl_general _ -> "Ast0_decl_general"
      | Ast0_decl_eq _ -> "Ast0_decl_eq"
      | Ast0_decl_type _ -> "Ast0_decl_type"
      | Ast0_decl_fixity _ -> "Ast0_decl_fixity"
      | Ast0_decl_empty -> "Ast0_decl_empty"
      | Ast0_type_implies _ -> "Ast0_type_implies"
      | Ast0_type_mapsto _ -> "Ast0_type_mapsto"
      | Ast0_type_btype _ -> "Ast0_type_btype"
      | Ast0_btype_app _ -> "Ast0_btype_app"
      | Ast0_btype_atype _ -> "Ast0_btype_atype"
      | Ast0_atype_con _ -> "Ast0_atype_con"
      | Ast0_atype_var _ -> "Ast0_atype_var"
      | Ast0_atype_tuple _ -> "Ast0_atype_tuple"
      | Ast0_atype_list _ -> "Ast0_atype_list"
      | Ast0_atype_paren _ -> "Ast0_atype_paren"
      | Ast0_gtycon_con _ -> "Ast0_gtycon_con"
      | Ast0_gtycon_unit -> "Ast0_gtycon_unit"
      | Ast0_gtycon_list -> "Ast0_gtycon_list"
      | Ast0_gtycon_fun -> "Ast0_gtycon_fun"
      | Ast0_gtycon_tuple _ -> "Ast0_gtycon_tuple"
      | Ast0_scontext _ -> "Ast0_scontext"
      | Ast0_simpleclass _ -> "Ast0_simpleclass"
      | Ast0_simpletype _ -> "Ast0_simpletype"
      | Ast0_constr_con _ -> "Ast0_constr_con"
      | Ast0_constr_conop _ -> "Ast0_constr_conop"
      | Ast0_constr_fields _ -> "Ast0_constr_fields"
      | Ast0_newconstr_con _ -> "Ast0_newconstr_con"
      | Ast0_newconstr_field _ -> "Ast0_newconstr_field"
      | Ast0_fielddecl _ -> "Ast0_fielddecl"
      | Ast0_deriving _ -> "Ast0_deriving"
      | Ast0_inst_con _ -> "Ast0_inst_con"
      | Ast0_inst_app _ -> "Ast0_inst_app"
      | Ast0_inst_tuple _ -> "Ast0_inst_tuple"
      | Ast0_inst_list _ -> "Ast0_inst_list"
      | Ast0_inst_fun _ -> "Ast0_inst_fun"
      | Ast0_rhs_eq _ -> "Ast0_rhs_eq"
      | Ast0_rhs_guard _ -> "Ast0_rhs_guard"
      | Ast0_gdrhs _ -> "Ast0_gdrhs"
      | Ast0_exp _ -> "Ast0_exp"
      | Ast0_infixexp_op _ -> "Ast0_infixexp_op"
      | Ast0_infixexp_exp10 _ -> "Ast0_infixexp_exp10"
      | Ast0_exp10_lambda _ -> "Ast0_exp10_lambda"
      | Ast0_exp10_let _ -> "Ast0_exp10_let"
      | Ast0_exp10_if _ -> "Ast0_exp10_if"
      | Ast0_exp10_case _ -> "Ast0_exp10_case"
      | Ast0_exp10_do _ -> "Ast0_exp10_do"
      | Ast0_exp10_aexps _ -> "Ast0_exp10_aexps"
      | Ast0_aexp_var _ -> "Ast0_aexp_var"
      | Ast0_aexp_con _ -> "Ast0_aexp_con"
      | Ast0_aexp_literal _ -> "Ast0_aexp_literal"
      | Ast0_aexp_paren _ -> "Ast0_aexp_paren"
      | Ast0_aexp_tuple _ -> "Ast0_aexp_tuple"
      | Ast0_aexp_list _ -> "Ast0_aexp_list"
      | Ast0_aexp_seq _ -> "Ast0_aexp_seq"
      | Ast0_aexp_comp _ -> "Ast0_aexp_comp"
      | Ast0_aexp_lsec _ -> "Ast0_aexp_lsec"
      | Ast0_aexp_rsec _ -> "Ast0_aexp_rsec"
      | Ast0_aexp_lbupdate _ -> "Ast0_aexp_lbupdate"
      | Ast0_aexp_aspat _ -> "Ast0_aexp_aspat"
      | Ast0_aexp_irrefpat _ -> "Ast0_aexp_irrefpat"
      | Ast0_aexp_wildpat -> "Ast0_aexp_wildpat"
      | Ast0_qual_assign _ -> "Ast0_qual_assign"
      | Ast0_qual_let _ -> "Ast0_qual_let"
      | Ast0_qual_guard _ -> "Ast0_qual_guard"
      | Ast0_alt_match _ -> "Ast0_alt_match"
      | Ast0_alt_guard _ -> "Ast0_alt_guard"
      | Ast0_gdpat _ -> "Ast0_gdpat"
      | Ast0_stmt_exp _ -> "Ast0_stmt_exp"
      | Ast0_stmt_assign _ -> "Ast0_stmt_assign"
      | Ast0_stmt_let _ -> "Ast0_stmt_let"
      | Ast0_stmt_empty -> "Ast0_stmt_empty"
      | Ast0_fbind _ -> "Ast0_fbind"
      | Ast0_gcon_unit -> "Ast0_gcon_unit"
      | Ast0_gcon_list -> "Ast0_gcon_list"
      | Ast0_gcon_tuple _ -> "Ast0_gcon_tuple"
      | Ast0_gcon_qcon _ -> "Ast0_gcon_qcon"
      | Ast0_parenthesized_leaf _ -> "Ast0_parenthesized_leaf"
      | Ast0_backquoted_leaf _ -> "Ast0_backquoted_leaf"
      | Ast0_leaf _ -> "Ast0_leaf"
      | Ast0_partial_list _ -> "Ast0_partial_list"
    in
    Printf.fprintf o "%s%s " indent s;
    match ast.node with
    | Ast0_leaf lx ->
        Printf.fprintf o "%a" lexeme_print lx
    | _ -> ();
    Printf.fprintf o "\n";
    _foo
  in
  Ast.ast0_preorder_foldl ast0_print_helper () ast
;;
